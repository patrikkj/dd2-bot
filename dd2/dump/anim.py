import numpy as np
from scipy import interpolate
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from timeit import default_timer as timer


x = np.array([2113.613525390625, -1665.4444580078125, 1658.8759765625, 3432.317138671875, 5451.61669921875, 5618.708984375, 10086.0634765625, 7449.1953125, 9784.462890625, 11389.9580078125, 12941.857421875, 14431.943359375, 14085.1640625, 10669.455078125, 7983.41650390625, 6523.5380859375, 4550.8359375, 7876.765625, 6541.00341796875, 3248.576416015625, 1620.5869140625, -974.154052734375, -2790.5107421875, -3272.70263671875, -2319.399658203125, 140.05076599121094])
y = np.array([-2593.782470703125, -2609.941162109375, -2578.390380859375, -3670.53564453125, -2572.214599609375, -1142.6474609375, 2834.659423828125, 55.56529998779297, -583.8148193359375, -3292.16845703125, -3681.58203125, -2343.821044921875, 595.2433471679688, 4093.303955078125, 5230.53564453125, 6959.10302734375, 7122.24169921875, 5165.9130859375, 2747.17333984375, 2808.266845703125, 4361.48388671875, 3051.271240234375, 3365.573486328125, 5118.205078125, 6213.00390625, 7121.7509765625])
# x = np.array([2113.613525390625, -1665.4444580078125, 1658.8759765625, 3432.317138671875, 5451.61669921875, 5618.708984375, 6735, 7852, 8969,            10086.0634765625, 7449.1953125, 9784.462890625, 11389.9580078125, 12941.857421875, 14431.943359375, 14085.1640625, 10669.455078125, 7983.41650390625, 6523.5380859375, 4550.8359375, 7876.765625, 6541.00341796875, 3248.576416015625, 1620.5869140625, -974.154052734375, -2790.5107421875, -3272.70263671875, -2319.399658203125, 140.05076599121094])
# y = np.array([-2593.782470703125, -2609.941162109375, -2578.390380859375, -3670.53564453125, -2572.214599609375, -1142.6474609375, -148, 846, 1840,           2834.659423828125, 55.56529998779297, -583.8148193359375, -3292.16845703125, -3681.58203125, -2343.821044921875, 595.2433471679688, 4093.303955078125, 5230.53564453125, 6959.10302734375, 7122.24169921875, 5165.9130859375, 2747.17333984375, 2808.266845703125, 4361.48388671875, 3051.271240234375, 3365.573486328125, 5118.205078125, 6213.00390625, 7121.7509765625])
# x = np.array([1658.8759765625, 3432.317138671875, 5451.61669921875, 5618.708984375, 6735, 7852, 8969,  10086.0634765625])
# y = np.array([-2578.390380859375, -3670.53564453125, -2572.214599609375, -1142.6474609375, -148, 846, 1840,   2834.659423828125])
# w = np.array([1, 1, 1, 2, 1, 1, 1, 1])
# w = np.array([1000, 1000, 1, 1000, 1000])
# t = np.linspace(0, 5, len(x))

tck, u = interpolate.splprep([x, y], w, s=50000, k=3)
# tck, u = interpolate.splprep([x, y], w, s=50000, k=3)
fig = plt.figure()
plt.legend(['Data points', 'Cubic Spline'])
plt.title('Parametric spline interpolation')

def animate(i):
    # unew = np.arange(0, min((i/1000), 1) + 0.02, 0.001)
    unew = np.arange(0, 1, 0.0001)
    t1 = timer()
    out = interpolate.splev(unew, tck)
    t2 = timer()
    out_d = interpolate.splev(unew, tck, der=1)
    t3 = timer()
    out_d = interpolate.splev(unew, tck, der=1)
    t4 = timer()
    print(f"N: {len(out[0]):8}  Value: {t2-t1:10.5f}  1st Order: {t3-t2:10.5f}  2nd Order: {t4-t3:10.5f}")
    # line = plt.plot(x, y, 'o', out[0], out[1], 'b', out_d[0], out_d[1], 'g')
    line = plt.plot(unew, out_d[1], 'g')
    plt.axis([min(x)-1, max(x)+1, min(y)-1, max(y)+1])
    plt.axis([-0.1, 1.1, min(out_d[1])-1, max(out_d[1])+1])
    return line

ani = animation.FuncAnimation(
    fig, animate, interval=0, blit=True, save_count=50)

# To save the animation, use e.g.
#
# ani.save("movie.mp4")
#
# or
#
# from matplotlib.animation import FFMpegWriter
# writer = FFMpegWriter(fps=15, metadata=dict(artist='Me'), bitrate=1800)
# ani.save("movie.mp4", writer=writer)

plt.show()







    # # unew = np.arange(0, min((i/1000), 1) + 0.02, 0.001)
    # unew = np.arange(0, 1, 0.0001)
    # t1 = timer()
    # out = interpolate.splev(unew, tck)
    # t2 = timer()
    # out_d = interpolate.splev(unew, tck, der=1)
    # t3 = timer()
    # out_d = interpolate.splev(unew, tck, der=1)
    # t4 = timer()
    # print(f"N: {len(out[0]):8}  Value: {t2-t1:10.5f}  1st Order: {t3-t2:10.5f}  2nd Order: {t4-t3:10.5f}")
    # # line = plt.plot(x, y, 'o', out[0], out[1], 'b', out_d[0], out_d[1], 'g')
    # line = plt.plot(unew, out_d[1], 'g')
    # # plt.axis([min(x)-1, max(x)+1, min(y)-1, max(y)+1])
    # plt.axis([-0.1, 1.1, min(out_d[1])-1, max(out_d[1])+1])
    # return line